package com.guobao.dto.ifpinsure;

import java.util.ArrayList;
import java.util.List;

public class LmRiskSortExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table lmrisksort
     *
     * @mbg.generated Fri Feb 15 17:41:45 CST 2019
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table lmrisksort
     *
     * @mbg.generated Fri Feb 15 17:41:45 CST 2019
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table lmrisksort
     *
     * @mbg.generated Fri Feb 15 17:41:45 CST 2019
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table lmrisksort
     *
     * @mbg.generated Fri Feb 15 17:41:45 CST 2019
     */
    public LmRiskSortExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table lmrisksort
     *
     * @mbg.generated Fri Feb 15 17:41:45 CST 2019
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table lmrisksort
     *
     * @mbg.generated Fri Feb 15 17:41:45 CST 2019
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table lmrisksort
     *
     * @mbg.generated Fri Feb 15 17:41:45 CST 2019
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table lmrisksort
     *
     * @mbg.generated Fri Feb 15 17:41:45 CST 2019
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table lmrisksort
     *
     * @mbg.generated Fri Feb 15 17:41:45 CST 2019
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table lmrisksort
     *
     * @mbg.generated Fri Feb 15 17:41:45 CST 2019
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table lmrisksort
     *
     * @mbg.generated Fri Feb 15 17:41:45 CST 2019
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table lmrisksort
     *
     * @mbg.generated Fri Feb 15 17:41:45 CST 2019
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table lmrisksort
     *
     * @mbg.generated Fri Feb 15 17:41:45 CST 2019
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table lmrisksort
     *
     * @mbg.generated Fri Feb 15 17:41:45 CST 2019
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table lmrisksort
     *
     * @mbg.generated Fri Feb 15 17:41:45 CST 2019
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andRiskcodeIsNull() {
            addCriterion("RISKCODE is null");
            return (Criteria) this;
        }

        public Criteria andRiskcodeIsNotNull() {
            addCriterion("RISKCODE is not null");
            return (Criteria) this;
        }

        public Criteria andRiskcodeEqualTo(String value) {
            addCriterion("RISKCODE =", value, "riskcode");
            return (Criteria) this;
        }

        public Criteria andRiskcodeNotEqualTo(String value) {
            addCriterion("RISKCODE <>", value, "riskcode");
            return (Criteria) this;
        }

        public Criteria andRiskcodeGreaterThan(String value) {
            addCriterion("RISKCODE >", value, "riskcode");
            return (Criteria) this;
        }

        public Criteria andRiskcodeGreaterThanOrEqualTo(String value) {
            addCriterion("RISKCODE >=", value, "riskcode");
            return (Criteria) this;
        }

        public Criteria andRiskcodeLessThan(String value) {
            addCriterion("RISKCODE <", value, "riskcode");
            return (Criteria) this;
        }

        public Criteria andRiskcodeLessThanOrEqualTo(String value) {
            addCriterion("RISKCODE <=", value, "riskcode");
            return (Criteria) this;
        }

        public Criteria andRiskcodeLike(String value) {
            addCriterion("RISKCODE like", value, "riskcode");
            return (Criteria) this;
        }

        public Criteria andRiskcodeNotLike(String value) {
            addCriterion("RISKCODE not like", value, "riskcode");
            return (Criteria) this;
        }

        public Criteria andRiskcodeIn(List<String> values) {
            addCriterion("RISKCODE in", values, "riskcode");
            return (Criteria) this;
        }

        public Criteria andRiskcodeNotIn(List<String> values) {
            addCriterion("RISKCODE not in", values, "riskcode");
            return (Criteria) this;
        }

        public Criteria andRiskcodeBetween(String value1, String value2) {
            addCriterion("RISKCODE between", value1, value2, "riskcode");
            return (Criteria) this;
        }

        public Criteria andRiskcodeNotBetween(String value1, String value2) {
            addCriterion("RISKCODE not between", value1, value2, "riskcode");
            return (Criteria) this;
        }

        public Criteria andRisksorttypeIsNull() {
            addCriterion("RISKSORTTYPE is null");
            return (Criteria) this;
        }

        public Criteria andRisksorttypeIsNotNull() {
            addCriterion("RISKSORTTYPE is not null");
            return (Criteria) this;
        }

        public Criteria andRisksorttypeEqualTo(String value) {
            addCriterion("RISKSORTTYPE =", value, "risksorttype");
            return (Criteria) this;
        }

        public Criteria andRisksorttypeNotEqualTo(String value) {
            addCriterion("RISKSORTTYPE <>", value, "risksorttype");
            return (Criteria) this;
        }

        public Criteria andRisksorttypeGreaterThan(String value) {
            addCriterion("RISKSORTTYPE >", value, "risksorttype");
            return (Criteria) this;
        }

        public Criteria andRisksorttypeGreaterThanOrEqualTo(String value) {
            addCriterion("RISKSORTTYPE >=", value, "risksorttype");
            return (Criteria) this;
        }

        public Criteria andRisksorttypeLessThan(String value) {
            addCriterion("RISKSORTTYPE <", value, "risksorttype");
            return (Criteria) this;
        }

        public Criteria andRisksorttypeLessThanOrEqualTo(String value) {
            addCriterion("RISKSORTTYPE <=", value, "risksorttype");
            return (Criteria) this;
        }

        public Criteria andRisksorttypeLike(String value) {
            addCriterion("RISKSORTTYPE like", value, "risksorttype");
            return (Criteria) this;
        }

        public Criteria andRisksorttypeNotLike(String value) {
            addCriterion("RISKSORTTYPE not like", value, "risksorttype");
            return (Criteria) this;
        }

        public Criteria andRisksorttypeIn(List<String> values) {
            addCriterion("RISKSORTTYPE in", values, "risksorttype");
            return (Criteria) this;
        }

        public Criteria andRisksorttypeNotIn(List<String> values) {
            addCriterion("RISKSORTTYPE not in", values, "risksorttype");
            return (Criteria) this;
        }

        public Criteria andRisksorttypeBetween(String value1, String value2) {
            addCriterion("RISKSORTTYPE between", value1, value2, "risksorttype");
            return (Criteria) this;
        }

        public Criteria andRisksorttypeNotBetween(String value1, String value2) {
            addCriterion("RISKSORTTYPE not between", value1, value2, "risksorttype");
            return (Criteria) this;
        }

        public Criteria andRisksortvalueIsNull() {
            addCriterion("RISKSORTVALUE is null");
            return (Criteria) this;
        }

        public Criteria andRisksortvalueIsNotNull() {
            addCriterion("RISKSORTVALUE is not null");
            return (Criteria) this;
        }

        public Criteria andRisksortvalueEqualTo(String value) {
            addCriterion("RISKSORTVALUE =", value, "risksortvalue");
            return (Criteria) this;
        }

        public Criteria andRisksortvalueNotEqualTo(String value) {
            addCriterion("RISKSORTVALUE <>", value, "risksortvalue");
            return (Criteria) this;
        }

        public Criteria andRisksortvalueGreaterThan(String value) {
            addCriterion("RISKSORTVALUE >", value, "risksortvalue");
            return (Criteria) this;
        }

        public Criteria andRisksortvalueGreaterThanOrEqualTo(String value) {
            addCriterion("RISKSORTVALUE >=", value, "risksortvalue");
            return (Criteria) this;
        }

        public Criteria andRisksortvalueLessThan(String value) {
            addCriterion("RISKSORTVALUE <", value, "risksortvalue");
            return (Criteria) this;
        }

        public Criteria andRisksortvalueLessThanOrEqualTo(String value) {
            addCriterion("RISKSORTVALUE <=", value, "risksortvalue");
            return (Criteria) this;
        }

        public Criteria andRisksortvalueLike(String value) {
            addCriterion("RISKSORTVALUE like", value, "risksortvalue");
            return (Criteria) this;
        }

        public Criteria andRisksortvalueNotLike(String value) {
            addCriterion("RISKSORTVALUE not like", value, "risksortvalue");
            return (Criteria) this;
        }

        public Criteria andRisksortvalueIn(List<String> values) {
            addCriterion("RISKSORTVALUE in", values, "risksortvalue");
            return (Criteria) this;
        }

        public Criteria andRisksortvalueNotIn(List<String> values) {
            addCriterion("RISKSORTVALUE not in", values, "risksortvalue");
            return (Criteria) this;
        }

        public Criteria andRisksortvalueBetween(String value1, String value2) {
            addCriterion("RISKSORTVALUE between", value1, value2, "risksortvalue");
            return (Criteria) this;
        }

        public Criteria andRisksortvalueNotBetween(String value1, String value2) {
            addCriterion("RISKSORTVALUE not between", value1, value2, "risksortvalue");
            return (Criteria) this;
        }

        public Criteria andRemarkIsNull() {
            addCriterion("REMARK is null");
            return (Criteria) this;
        }

        public Criteria andRemarkIsNotNull() {
            addCriterion("REMARK is not null");
            return (Criteria) this;
        }

        public Criteria andRemarkEqualTo(String value) {
            addCriterion("REMARK =", value, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkNotEqualTo(String value) {
            addCriterion("REMARK <>", value, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkGreaterThan(String value) {
            addCriterion("REMARK >", value, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkGreaterThanOrEqualTo(String value) {
            addCriterion("REMARK >=", value, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkLessThan(String value) {
            addCriterion("REMARK <", value, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkLessThanOrEqualTo(String value) {
            addCriterion("REMARK <=", value, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkLike(String value) {
            addCriterion("REMARK like", value, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkNotLike(String value) {
            addCriterion("REMARK not like", value, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkIn(List<String> values) {
            addCriterion("REMARK in", values, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkNotIn(List<String> values) {
            addCriterion("REMARK not in", values, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkBetween(String value1, String value2) {
            addCriterion("REMARK between", value1, value2, "remark");
            return (Criteria) this;
        }

        public Criteria andRemarkNotBetween(String value1, String value2) {
            addCriterion("REMARK not between", value1, value2, "remark");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table lmrisksort
     *
     * @mbg.generated do_not_delete_during_merge Fri Feb 15 17:41:45 CST 2019
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table lmrisksort
     *
     * @mbg.generated Fri Feb 15 17:41:45 CST 2019
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}